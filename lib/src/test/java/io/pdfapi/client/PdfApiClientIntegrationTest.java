package io.pdfapi.client;

import io.pdfapi.client.model.ConversionProperties;
import io.pdfapi.client.model.Margin;
import io.pdfapi.client.model.PageFormat;
import okhttp3.OkHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.client.RestTemplate;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.function.Function;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assumptions.assumeTrue;

@Tag("integration")
@DisplayName("PDF API Client Integration Tests")
class PdfApiClientIntegrationTest {
    private static final Logger logger = LoggerFactory.getLogger(PdfApiClientIntegrationTest.class);
    private static final Path TEST_OUTPUT_DIR = Paths.get("build", "test-output", "pdfs");

    // Test content
    private static final String TEST_HTML =
            "<html>\n" +
            "<head>\n" +
            "    <link rel=\"stylesheet\" href=\"styles.css\">\n" +
            "</head>\n" +
            "<body>\n" +
            "    <h1>Integration Test</h1>\n" +
            "    <p>This is a test document.</p>\n" +
            "    <img src=\"test.png\" alt=\"Test image\">\n" +
            "</body>\n" +
            "</html>";

    private static final String TEST_HEADER =
            "<div style='text-align: center; font-size: 10px;'>\n" +
            "    Page <span class='pageNumber'></span> of <span class='totalPages'></span>\n" +
            "</div>";

    private static final String TEST_FOOTER =
            "<div style='text-align: center; font-size: 10px;'>\n" +
            "    Generated by PDF API\n" +
            "</div>";

    private static final String TEST_STYLE =
            "body {\n" +
            "    font-family: Arial, sans-serif;\n" +
            "    margin: 20px;\n" +
            "}\n" +
            "h1 {\n" +
            "    color: #333;\n" +
            "    margin-bottom: 1em;\n" +
            "}";

    // 1x1 transparent PNG
    private static final String TEST_IMAGE = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==";

    private PdfApiClientConfig config;
    private ConversionRequest request;

    @BeforeAll
    static void setupTestOutputDir() throws IOException {
        Files.createDirectories(TEST_OUTPUT_DIR);
        logger.info("Created test output directory: {}", TEST_OUTPUT_DIR);
    }

    @BeforeEach
    void setUp() {
        initializeConfig();
        buildTestRequest();
    }

    private void initializeConfig() {
        String apiKey = System.getenv("PDFAPI_KEY");
        assumeTrue(apiKey != null && !apiKey.isEmpty(), "PDFAPI_KEY environment variable must be set");

        config = PdfApiClientConfig.builder()
                .baseUrl("http://localhost:8080")
                .apiKey(apiKey)
                .build();
    }

    private void buildTestRequest() {
        request = ConversionRequest.builder()
                .properties(buildProperties())
                .htmlContent(createInputStream(TEST_HTML))
                .headerFile(createAsset(TEST_HEADER, "header.html"))
                .footerFile(createAsset(TEST_FOOTER, "footer.html"))
                .addAsset(createAsset(TEST_STYLE, "styles.css"))
                .addAsset(createAsset(Base64.getDecoder().decode(TEST_IMAGE), "test.png"))
                .build();
    }

    private ConversionProperties buildProperties() {
        return ConversionProperties.builder()
                .format(PageFormat.A4)
                .margin(Margin.builder()
                        .top(50)    // Space for header
                        .bottom(50) // Space for footer
                        .left(20)
                        .right(20)
                        .build())
                .build();
    }

    private ByteArrayInputStream createInputStream(String content) {
        return new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));
    }

    private ByteArrayInputStream createInputStream(byte[] content) {
        return new ByteArrayInputStream(content);
    }

    private ConversionRequest.AssetInput createAsset(String content, String fileName) {
        return ConversionRequest.AssetInput.of(createInputStream(content), fileName);
    }

    private ConversionRequest.AssetInput createAsset(byte[] content, String fileName) {
        return ConversionRequest.AssetInput.of(createInputStream(content), fileName);
    }

    @Test
    @DisplayName("Convert HTML to PDF using default OkHttpClient")
    void testWithDefaultOkHttpClient() throws Exception {
        testClientImplementation(PdfApiClientFactory::createClient);
    }

    @Test
    @DisplayName("Convert HTML to PDF using custom OkHttp client")
    void testWithCustomOkHttpClient() throws Exception {
        OkHttpClient customClient = new OkHttpClient.Builder()
                .followRedirects(true)
                .retryOnConnectionFailure(true)
                .build();

        testClientImplementation(clientConfig ->
                PdfApiClientFactory.createWithOkHttp(clientConfig, customClient));
    }

    @Test
    @DisplayName("Convert HTML to PDF using Apache HTTP client")
    void testWithApacheHttpClient() throws Exception {
        testClientImplementation(PdfApiClientFactory::createWithApacheHttpClient);
    }

    @Test
    @DisplayName("Convert HTML to PDF using custom Apache HTTP client")
    void testWithCustomApacheHttpClient() throws Exception {
        try (var customClient = HttpClients.custom()
                .setMaxConnTotal(10)
                .setMaxConnPerRoute(5)
                .build()) {

            testClientImplementation(clientConfig ->
                    PdfApiClientFactory.createWithApacheHttpClient(clientConfig, customClient));
        }
    }

    @Test
    @DisplayName("Convert HTML to PDF using Spring RestTemplate")
    void testWithRestTemplate() throws Exception {
        testClientImplementation(PdfApiClientFactory::createWithRestTemplate);
    }

    @Test
    @DisplayName("Convert HTML to PDF using custom RestTemplate")
    void testWithCustomRestTemplate() throws Exception {
        RestTemplate customTemplate = new RestTemplate();
        testClientImplementation(clientConfig ->
                PdfApiClientFactory.createWithRestTemplate(clientConfig, customTemplate));
    }

    private void testClientImplementation(Function<PdfApiClientConfig, PdfApiClient> clientFactory) throws Exception {
        String testName = Thread.currentThread().getStackTrace()[2].getMethodName();
        try (PdfApiClient client = clientFactory.apply(config)) {
            // Create a fresh request for each test to avoid stream issues
            buildTestRequest();

            ByteArrayOutputStream output = new ByteArrayOutputStream();
            client.convert(request, output).join();

            byte[] pdfContent = output.toByteArray();
            verifyPdfOutput(pdfContent);
            savePdfOutput(pdfContent, testName);
        }
    }

    private void verifyPdfOutput(byte[] pdfContent) {
        assertNotNull(pdfContent, "PDF content should not be null");
        assertTrue(pdfContent.length > 0, "PDF should not be empty");
        assertTrue(isPdfContent(pdfContent), "Output should be PDF content");
    }

    /**
     * Check if the content is a valid PDF by looking for the PDF header magic number
     */
    private boolean isPdfContent(byte[] content) {
        if (content.length < 4) return false;
        return content[0] == '%' && content[1] == 'P' && content[2] == 'D' && content[3] == 'F';
    }

    private void savePdfOutput(byte[] pdfContent, String testName) {
        Path pdfPath = TEST_OUTPUT_DIR.resolve(testName + ".pdf");
        try (FileOutputStream fos = new FileOutputStream(pdfPath.toFile())) {
            fos.write(pdfContent);
            logger.info("Saved PDF output to: {}", pdfPath);
        } catch (IOException e) {
            logger.error("Failed to save PDF output", e);
        }
    }
} 
